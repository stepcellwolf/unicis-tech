<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Predrag TASEVSKI - Pece - regular expression</title><link href="https://predragtasevski.com/" rel="alternate"></link><link href="https://predragtasevski.com/feeds/tag/regular-expression.atom.xml" rel="self"></link><id>https://predragtasevski.com/</id><updated>2012-01-16T00:00:00+01:00</updated><entry><title>Regular Expression</title><link href="https://predragtasevski.com/posts/2012/01/regular-expression/" rel="alternate"></link><published>2012-01-16T00:00:00+01:00</published><updated>2012-01-16T00:00:00+01:00</updated><author><name>Predrag TASEVSKI - Pece</name></author><id>tag:predragtasevski.com,2012-01-16:/posts/2012/01/regular-expression/</id><summary type="html">&lt;p&gt;This post delivers solution of advance regular expression. In the
following lines we describe the goal and the rules of the task, whereby
follows with the working solution.&lt;/p&gt;
&lt;/p&gt;

&lt;h1&gt;Task&lt;/h1&gt;
&lt;/p&gt;

&lt;p&gt;Write a regular expression for matching the names which follow the
following rules:&lt;/p&gt;
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Each name consists of one or more parts …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;This post delivers solution of advance regular expression. In the
following lines we describe the goal and the rules of the task, whereby
follows with the working solution.&lt;/p&gt;
&lt;/p&gt;

&lt;h1&gt;Task&lt;/h1&gt;
&lt;/p&gt;

&lt;p&gt;Write a regular expression for matching the names which follow the
following rules:&lt;/p&gt;
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Each name consists of one or more parts. If there are two or more
    parts, they are separated either with a single space (” “) or dash
    (“-”) character.&lt;/li&gt;
&lt;li&gt;Each name part must consist of letters only. The name part must
    begin with an upper-case letter which are followed by one or more
    lower-case letters. Each name part can  have an optional prefix
    which begins with an upper-case letter, followed by one or more
    lower-case letters.&lt;/li&gt;
&lt;/ol&gt;
&lt;/p&gt;

&lt;h1&gt;Solution&lt;/h1&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;

    ^([A-Z][a-z]+([A-Z][a-z]+)?(\s|-))*[A-Z][a-z]+([A-Z][a-z]+)?$

&lt;/div&gt;

&lt;/p&gt;

&lt;p&gt;For completing the task, we are dividing into several sub-tasks.&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;Firstly, we had to find expression, which satisfies the first
requirement of the task: representing one or more parts, which can be
separated either with space (“ “) or dash (“-”). Thereby, we can
represent space and dash with the following expression (\s|-).&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;If the entry is just one legitimate part (without space or dash after),
(\s|-) has 0 occurrences. Yet the entry may consist of many legitimate
parts divided by spaces or dashes. The expression should be (\s|-)*.&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;As for the legitimate parts, we have to write expression considering
second part of requirements.&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;Legitimate part should consist of letters only, begin with (only one)
uppercase letter and followed by one or more lowercase letters.
Legitimate part can have prefix beginning with (only one) uppercase
letter, followed by one or more lowercase letters.&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;Therefore, &lt;code&gt;[A-Z][a-z]+&lt;/code&gt; represents the entry which begins uppercase
letter and is followed by one or more lower case letters. In addition,
to represent prefix, which occurs either 0 or 1 time, we will have the
following expression: &lt;code&gt;([A-Z][a-z]+)?&lt;/code&gt;. Moreover, to represent the whole
legitimate entry, we merge the two expressions (it does not matter
whether prefix expression comes first) with:
&lt;code&gt;[A-Z][a-z]+([A-Z][a-z]+)?&lt;/code&gt;. Thus with this expression we go back to
(\s|-)* where putting &lt;code&gt;[A-Z][a-z]+([A-Z][az]+)&lt;/code&gt; into parentheses with
(\s|-) and take * outside of parentheses (as this whole expression)
legitimate part with either space or dash should be presented for 0
or more consecutive times.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(([A-Z][a-z]+([A-Z][a-z]+)?(\s|-))*&lt;/code&gt;&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;To be able to exclude entries, which end with “-”, we add expression of
legitimate part. and add “\^” and “\$” respectively at the beginning and
the end of expression, to mark the  beginning and an end of the string.&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;^(([A-Z][a-z]+([A-Z][a-z]+)?(|s|-))*([A-Z][a-z]+([A-Z][a-z]+)?$&lt;/code&gt;&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;Finally, we have the whole expression we have to test it (we have to put
the expression in quotation marks).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;egrep ‘^([A-Z][a-z]+([A-Z][a-z]+)?(\s|-))*[A-Z][a-z]+([A-Z][a-z]+)?$’   file_name&lt;/code&gt;&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;The above solution is written by: Predrag Tasevski and Mikheil Basilaia&lt;/p&gt;
&lt;/p&gt;</content><category term="pages"></category><category term="grep"></category><category term="log mining"></category><category term="regular expression"></category><category term="linux"></category><category term="unix"></category></entry></feed>