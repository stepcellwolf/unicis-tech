<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Predrag TASEVSKI - Pece - wordpress</title><link href="http://predragtasevski.com/" rel="alternate"></link><link href="http://predragtasevski.com/feeds/wordpress.atom.xml" rel="self"></link><id>http://predragtasevski.com/</id><updated>2012-03-23T00:00:00+01:00</updated><entry><title>Clever solution by making site more resilient by optimization</title><link href="http://predragtasevski.com/posts/2012/03/clever-solution-by-making-site-more-resilient-by-optimization/" rel="alternate"></link><published>2012-03-23T00:00:00+01:00</published><updated>2012-03-23T00:00:00+01:00</updated><author><name>Predrag TASEVSKI - Pece</name></author><id>tag:predragtasevski.com,2012-03-23:/posts/2012/03/clever-solution-by-making-site-more-resilient-by-optimization/</id><summary type="html">&lt;h1&gt;PURPOSE &amp;amp; SCENARIO&lt;/h1&gt;
&lt;/p&gt;

&lt;p&gt;The objective of this laboratory test, scenario is to make explore
alternative “clever” solutions (as opposed to making the site more
resilient by optimizing it) to protect your site against attacks.
Moreover, DDoS [1] attacks, malicious code, etc.&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;Therefore, we need to develop countermeasures for the &lt;strong&gt;working&lt;/strong&gt;
attacks …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;PURPOSE &amp;amp; SCENARIO&lt;/h1&gt;
&lt;/p&gt;

&lt;p&gt;The objective of this laboratory test, scenario is to make explore
alternative “clever” solutions (as opposed to making the site more
resilient by optimizing it) to protect your site against attacks.
Moreover, DDoS [1] attacks, malicious code, etc.&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;Therefore, we need to develop countermeasures for the &lt;strong&gt;working&lt;/strong&gt;
attacks simulated with a standard DoS attack from a single IP address
(performed with AB [2] or Jmeter). Limitations for this scenarios is
highlighted:&lt;/p&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No additional hardware can be used&lt;/li&gt;
&lt;li&gt;The wordpress installation can not be optimized: no caching plugins,
    no reverse-proxy (varnish, squid etc)&lt;/li&gt;
&lt;li&gt;No reactive measures that automatically block incoming traffic: the
    site must respond to at least some of the requests coming from the
    attacker at all times&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The countermeasures must not have negative effects on “normal usage
    pattern”. Normal usage pattern is defined as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bursts of 10 connections per IP address in 1 second&lt;/li&gt;
&lt;li&gt;Page load times not over 10 seconds&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;
-   Normal usage must be possible from the same IP address that the
attack originated from after a 20 second delay maximum.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;In addition, we have to make much of the rules for the scenario. Rules
as follow: Fresh installation of the latest version of Ubuntu Server and
the most recent WordPress as of 20.10.2011. First priority: No normal
usage pattern connections can be dropped! Second priority: service speed
of normal connections. Defined by number of connections / second (easy
to measure). Third priority: How fast after the attack is stopped, the
site can be accessed from the attacking IP again.&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;Each test and measured results will be exposed in to Test section.
Whereas, the process of installation of clever solution and attacking
scripts will be provided in to Appendixes section.&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;Finally, the measurement results will be compared with the first state
without attack and any security solutions applied. Alternatively,
providing measurement results with one solution and attack will help us
to identify the most beneficial security solution. Therefore, in
Conclusion section comparison results will be highlighted.&lt;/p&gt;
&lt;/p&gt;

&lt;h1&gt;TESTS&lt;/h1&gt;
&lt;/p&gt;

&lt;p&gt;Because of requirements of our scenario we need to display the results
before security solution is applied and attacker performance. For this
purpose we are going to use an AB script to display the response time of
the server:&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ab -t 10 -n 10 -c 10 http://192.168.56.102/wordpress/&lt;/code&gt;&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;The above script provides detail information, yet only important is
Request per second. Thus, with an fresh installation and without any
security solution, it provided with result of 3.95 [#/sec]. With other
word, 3.95 number of request per second. After applying different
security solution and performing an attack to the server, results will
be divers.&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;In addition, test were done by two different virtual environment
machines. One is for testing results and the other one is to perform
attack with the following script:&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ab -n 100 -c 10 http://192.168.56.102/wordpress/&lt;/code&gt;&lt;/p&gt;
&lt;/p&gt;

&lt;h2&gt;TEST 1&lt;/h2&gt;
&lt;/p&gt;

&lt;p&gt;First test is to install libapache2-mod-evasive
[libapache2-mod-evasive]. Where, mod_evasive is an evasive maneuvers
module for Apache is to provide some protection in the event of an HTTP
DoS or DDoS attack or brute force attack. It is also designed to be a
detection tool, and can be easily configured to talk to ipchains,
firewalls, routers, and etcetera.&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;The process of installation and configuration refer to the Appendix 1.&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;After completed the installation and configuration process it is time to
test the security solution and to highlight the results. Before
performing the attack the results were somehow, lower then, before
installing the mod-evasive, 2.06 number request per second. When we
start the attack and in same time analysis the server responded with
timeout. The conclusion is that mod-evasive it is not enough solution.&lt;/p&gt;
&lt;/p&gt;

&lt;h2&gt;TEST 2&lt;/h2&gt;
&lt;/p&gt;

&lt;p&gt;From previous test we can see that the solution was not enough clever
for our needs. The server somehow was dead. However, we are going to
install now &lt;code&gt;mod_security&lt;/code&gt; module for apache, with side of previous
test. For more detail information of installation process and
configuration refer to Appendix 2 or to the following source
[mod_security].&lt;/p&gt;
&lt;/p&gt;

&lt;h1&gt;CONCLUSION&lt;/h1&gt;
&lt;/p&gt;

&lt;p&gt;There are three points that we should consider and to see which proposal
was more accurate and it did the job that was required in the scenario.&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;In conclusion, the above proposals are nice and good example to have an
view of how and with what tools we should perform script kiddie
techniques. How to shutdown access to a server. On the whole, it show as
how to use tools and methods of measuring the bandwidth of network and
how to limit the transfer in comfortable way.&lt;/p&gt;
&lt;/p&gt;

&lt;h1&gt;APPENDIXES&lt;/h1&gt;
&lt;/p&gt;

&lt;p&gt;Appendix 1 is connected with the Method 1, which highlighted points are
illustration on what information we should check, to clarify that the
virtual environment has limitation of the network interface. Where
Appendix 2 is for installation process of Ubuntu Server 10.04 LTS and
wordpress, mysql installation.&lt;/p&gt;
&lt;/p&gt;

&lt;h2&gt;APPENDIX 1&lt;/h2&gt;
&lt;/p&gt;

&lt;p&gt;Installation process:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install libapache2-mod-evasive&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Configuration process is followed and gather from the following source
[Evasive Module], for addition proposal please refer to[Blacklist]:&lt;/p&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;

    sudo mkdir /var/log/apache2/mod_evasivesudo chown www-data /var/log/apache2/mod_evasive

&lt;/div&gt;

&lt;/p&gt;

&lt;p&gt;Afterwards, create its configuration file with a default content, with
the following command:&lt;/p&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;

    sudo nano /etc/apache2/apache2.conf IfModule mod_evasive20.c;DOSHashTableSize 3097DOSPageCount 2DOSSiteCount 50DOSPageInterval 1DOSSiteInterval 1DOSBlockingPeriod 10DOSLogDir /var/log/apache2/mod_evasiveDOSEmailNotify root@localhostDOSWhitelist 127.0.0.1DOSSystemCommand &amp;amp;quot;/sbin/iptables -I INPUT -p tcp --dport 80 -s %s -j DROP/IfModule;

&lt;/div&gt;

&lt;/p&gt;

&lt;p&gt;The above changes to take effect please restart the apache service by:&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo service apache2 restart&lt;/code&gt;&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;You can test whether it works using a script included in the deb
package:&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;perl /usr/share/doc/libapache2-mod-evasive/examples/test.pl&lt;/code&gt;&lt;/p&gt;
&lt;/p&gt;

&lt;h2&gt;APPENDIX 2&lt;/h2&gt;
&lt;/p&gt;

&lt;p&gt;Installation and configuration of mod_security:&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;apt-get install libapache2-modsecurity /etc/init.d/apache2 force-reload&lt;/code&gt;&lt;/p&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Installation media: Ubuntu 11.10 32bit iso image;&lt;/li&gt;
&lt;li&gt;HW: Virtualbox, 1CPU 32bit, 512MB RAM, 8GB HD (dynamic allocation);&lt;/li&gt;
&lt;li&gt;NIC1 NAT;&lt;/li&gt;
&lt;li&gt;NIC2 host only (for ssh and http access from host);&lt;/li&gt;
&lt;li&gt;Language used in installation process: English and country Estonia;&lt;/li&gt;
&lt;li&gt;Keyboard Layout English;&lt;/li&gt;
&lt;li&gt;no http proxy&lt;/li&gt;
&lt;li&gt;Default applications&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get install lamp phpmyadmin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wget -c http://wordpress.org/latest.tar.gz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tar xvjf latest.tar.gz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo cp wordpress /var/www/wordpress&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo nano /var/www/wordpress/wp-config.php&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Change the settings to your needs&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;h1&gt;Bibliography&lt;/h1&gt;
&lt;/p&gt;

&lt;p&gt;[libapache2-mod-evasive] Canonical Ltd., Package: libapache2-mod-evasive
(1.10.1-1), 2011,
&lt;a href="http://packages.ubuntu.com/hardy/libapache2-mod-evasive"&gt;http://packages.ubuntu.com/hardy/libapache2-mod-evasive&lt;/a&gt;&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;[modsecurity] How to Forge, Secure Your Apache With mod_security, 2006,
&lt;a href="http://www.howtoforge.com/apache_mod_security"&gt;http://www.howtoforge.com/apache_mod_security&lt;/a&gt;&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;[Evasive Module] Deep Logic, Inc., Apache Evasive Maneuvers Module,
2005,
&lt;a href="http://fossies.org/unix/www/apache_httpd_modules/mod_evasive_1.10.1.tar.gz:t/mod_evasive/README"&gt;http://fossies.org/unix/www/apache_httpd_modules/mod_evasive_1.10.1.tar.gz:t/mod_evasive/README&lt;/a&gt;&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;[Blacklist] Jeff Starr, Eight Ways to Blacklist with Apache’s
mod_rewrite, Feb 2009,
&lt;a href="http://perishablepress.com/press/2009/02/03/eight-ways-to-blacklist-with-apaches-mod_rewrite/"&gt;http://perishablepress.com/press/2009/02/03/eight-ways-to-blacklist-with-apaches-mod_rewrite/&lt;/a&gt;&lt;/p&gt;
&lt;/p&gt;

&lt;h1&gt;Footnotes&lt;/h1&gt;
&lt;/p&gt;

&lt;p&gt;[1] DDoS – Denial-of-service attack&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;[2] AB - &lt;a href="http://httpd.apache.org/docs/2.0/programs/ab.html"&gt;http://httpd.apache.org/docs/2.0/programs/ab.html&lt;/a&gt;&lt;/p&gt;
&lt;/p&gt;</content><category term="ab"></category><category term="attacks"></category><category term="clever solution"></category><category term="cyber security"></category><category term="DDoS"></category><category term="internet"></category><category term="jmeter"></category><category term="malicious code"></category><category term="wordpress"></category></entry><entry><title>WordPress CMS acceleration and optamization</title><link href="http://predragtasevski.com/posts/2011/04/wordpress-cms-acceleration-and-optamization/" rel="alternate"></link><published>2011-04-09T23:00:00+02:00</published><updated>2011-04-09T23:00:00+02:00</updated><author><name>Predrag TASEVSKI - Pece</name></author><id>tag:predragtasevski.com,2011-04-09:/posts/2011/04/wordpress-cms-acceleration-and-optamization/</id><summary type="html">&lt;h1&gt;PURPOSE&lt;/h1&gt;
&lt;/p&gt;

&lt;p&gt;The goal of this laboratory test is to evaluate speed-up solution for
already mounted clean, by default wordpress CMS platform. The measures
were made by custom script for Linux operating system, in our case the
server side is Ubuntu server 10.04 LTS running on 32 bit system with …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;PURPOSE&lt;/h1&gt;
&lt;/p&gt;

&lt;p&gt;The goal of this laboratory test is to evaluate speed-up solution for
already mounted clean, by default wordpress CMS platform. The measures
were made by custom script for Linux operating system, in our case the
server side is Ubuntu server 10.04 LTS running on 32 bit system with
512MB Ram and testing platform Fedora 14 for more details see section
appendixes.&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;The laboratory task is to assist anyone else to be able to perform
optimization in easy meaner to their blog, homepage, magazine, etc.
without any advantage of technical knowledge.&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;Presenting stepwise solution with installing firstly wordpress
optimization cache plugin, secondary installing PHP solution for
increasing the acceleration performance of the server and changing the
permalinks settings to the CMS platform for higher optimization. All of
the above solutions are free open source, and are taking care of the low
budget.&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;In addition providing measurement results with different scenarios will
help us to get wide picture of how affective was optimization.&lt;/p&gt;
&lt;/p&gt;

&lt;h1&gt;METHODS&lt;/h1&gt;
&lt;/p&gt;

&lt;p&gt;Optimization of the access to wordpress CMS platform is done in behalf
of three different scenarios have been proved while performance is
getting slightly higher. Test script is measuring the response time of
the link provided and it is recording the results in a text file. Which
contains the three attends respondent time of the server. For each
method we will provide the results in analyses section.&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;The following steps should be done on the server side.&lt;/p&gt;
&lt;/p&gt;

&lt;h2&gt;METHOD 1&lt;/h2&gt;
&lt;/p&gt;

&lt;p&gt;Installing procedure [WP-Super-Cache Installation], first method of
wordpress plugin: WP Super Cache Version 0.9.9.9&lt;/p&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;

    In a terminal please type the following lines:wget -c http://downloads.wordpress.org/plugin/wp-super-cache.0.9.9.9.zipsudo apt-get install unzipunzip wp-super-cache.0.9.9.9.zipmv /home/[user]/wp-super-cache /var/www/wordpress/plugins

&lt;/div&gt;

&lt;/p&gt;

&lt;p&gt;In wordpress administration link:
&lt;a href="http://192.168.56.102/wordpress/wp-admin"&gt;http://192.168.56.102/wordpress/&lt;/a&gt;&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="http://192.168.56.102/wordpress/wp-admin"&gt;wp-admin&lt;/a&gt;, log in with the
credentials, from the panel select &lt;em&gt;Plugins&lt;/em&gt; -&gt; &lt;em&gt;WP-Super-Cache&lt;/em&gt; -&gt;
&lt;em&gt;Activate&lt;/em&gt;. After the activation is done, go to &lt;em&gt;Settings&lt;/em&gt; -&gt;
&lt;em&gt;WP-Super-Cache&lt;/em&gt;, on the first tab activate the cache by selecting the
On cache and on the Advance tab select only the “(Recommended)”
settings. After your done, select &lt;em&gt;Update Settings&lt;/em&gt; and on the bottom of
the page you can see a red text that needs to be copy in one of the
files that is located on the server. Connect to your server by FTP
client and locate the &lt;em&gt;.htaccess&lt;/em&gt; file on the wordpress directory and
open it and paste the following lines and save the file:&lt;/p&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;

    # BEGIN WPSuperCache &amp;lt;IfModule mod_rewrite.c&amp;gt;RewriteEngine On RewriteBase /wordpress/AddDefaultCharset UTF-8RewriteCond %{REQUEST_URI} !^.*[^/]$RewriteCond %{REQUEST_URI} !^.*//.*$ RewriteCond %{REQUEST_METHOD} !POST RewriteCond %{QUERY_STRING} !.*=.*RewriteCond %{HTTP:Cookie} !^.*(comment_author_|wordpress_logged_in|wp-postpass_).*$RewriteCond %{HTTP:X-Wap-Profile} !^[a-z0-9\"]+ [NC]RewriteCond %{HTTP:Profile} !^[a-z0-9\"]+ [NC]RewriteCond %{HTTP_USER_AGENT} !^.*(2.0\ MMP|240x320|400X240|AvantGo|BlackBerry|Blazer| Cellphone|Danger|DoCoMo|Elaine/3.0|Eu$ RewriteCond %{HTTP_user_agent} !^(w3c\ |w3c-|acs-|alav|alca|amoi|audi|avan|benq|bird| blac|blaz|brew|cell|cldc|cmd-|dang|doco$ RewriteCond %{HTTP:Accept-Encoding} gzip RewriteCond %{DOCUMENT_ROOT}/wordpress/wp-content/cache/supercache/% {HTTP_HOST}/wordpress/$1/index.html.gz -f RewriteRule ^(.*)"/wordpress/wp-content/cache/supercache/%{HTTP_HOST}/wordpress/ $1/index.html.gz" [L] RewriteCond %{REQUEST_URI} !^.*[^/]$RewriteCond %{REQUEST_URI} !^.*//.*$ RewriteCond %{REQUEST_METHOD} !POST RewriteCond %{QUERY_STRING} !.*=.*RewriteCond %{HTTP:Cookie} !^.*(comment_author_|wordpress_logged_in|wp-postpass_).*$RewriteCond %{HTTP:X-Wap-Profile} !^[a-z0-9\"]+ [NC]RewriteCond %{HTTP:Profile} !^[a-z0-9\"]+ [NC]RewriteCond %{HTTP_USER_AGENT} !^.*(2.0\ MMP|240x320|400X240|AvantGo|BlackBerry|Blazer| Cellphone|Danger|DoCoMo|Elaine/3.0|Eu$ RewriteCond %{HTTP_user_agent} !^(w3c\ |w3c-|acs-|alav|alca|amoi|audi|avan|benq|bird| blac|blaz|brew|cell|cldc|cmd-|dang|doco$ RewriteCond %{DOCUMENT_ROOT}/wordpress/wp-content/cache/supercache/% {HTTP_HOST}/wordpress/$1/index.html -f RewriteRule ^(.*) "/wordpress/wp-content/cache/supercache/%{HTTP_HOST}/wordpress/ $1/index.html" [L] &amp;lt;/IfModule&amp;gt;# END WPSuperCache

&lt;/div&gt;

&lt;/p&gt;

&lt;h2&gt;METHOD 2&lt;/h2&gt;
&lt;/p&gt;

&lt;p&gt;The second approach is to install an PHP accelerator and optimizer
[EAccelerator Installing from source]. The main goal is to increases the
performance of PHP scripts by caching them in their compiled state.
Which will augment the acceleration applied with method 1.&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;Therefore, please follow the steps to install from source code
eAccelerator [2].&lt;/p&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;

    sudo apt-get install php-devwget -c http://ignum.dl.sourceforge.net/project/eaccelerator/eaccelerator/eAccelerator%200.9.6.1/eaccelerator-0.9.6.1.tar.bz2tar xvfj eaccelerator-0.9.6.1.tar.bz2cd eaccelerator-0.9.6.1phpize./configuremakesudo make installsudo cp /eaccelerator-0.9.6.1 /etc/apache2/php.inisudo mkdir /tmp/eacceleratorsudo chmod 0777 /tmp/eacceleratorsudo /etc/init.d/apache2 restart

&lt;/div&gt;

&lt;/p&gt;

&lt;p&gt;After you have completed the above steps it is good way to test the php
if the eaccelerator is working and correctly installed. In any case,
please create a file called &lt;em&gt;info.php&lt;/em&gt; on your wordpress directory with
the following code inside:&lt;/p&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;

    &lt;?php phpinfo(); &gt;

&lt;/div&gt;

&lt;/p&gt;

&lt;p&gt;Access the link to your server vie the link
http://192.168.56.102/wordpress/info.php. If you see the configuration
information and details of PHP, the quickest way is to search for
eaccelerator, and if the result is positive, most lightly you have
installed eaccelerator correctly.&lt;/p&gt;
&lt;/p&gt;

&lt;h2&gt;METHOD 3&lt;/h2&gt;
&lt;/p&gt;

&lt;p&gt;After we have completed the first and second methods it is time to grow
the interactiveness of our wordpress project. Therefore, we will change
setting to wordpress configuration where will speed-up the performance
[Using Permalinks]. If can still add more optimization and acceleration
applications, yet this laboratory report is performed only with three
easy and maintained steps.&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;Please log in to the wordpress administration panel, and on &lt;em&gt;Settings&lt;/em&gt;
-&gt; &lt;em&gt;Permalinks&lt;/em&gt; select &lt;em&gt;Default&lt;/em&gt;. After the step is done, then we need
to edit the &lt;em&gt;.htaccess&lt;/em&gt; file and add the following lines at the end of
the file and please save it:&lt;/p&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;

    # BEGIN WordPressIfModule mod_rewrite.c&amp;gt;RewriteRule ^index\.php$ - [L]RewriteCond %{REQUEST_FILENAME} !-fRewriteCond %{REQUEST_FILENAME} !-dRewriteRule . /wordpress/index.php [L]&amp;lt;/IfModule&amp;gt;# END WordPress&lt;/pre&gt;

&lt;/div&gt;

&lt;/p&gt;

&lt;h1&gt;ANALYSIS&lt;/h1&gt;
&lt;/p&gt;

&lt;p&gt;After completing each one of the method we should perform analysis of
the system, were it will provide results of performance speed and can
compare it if it is utter to improve the effectiveness of wordpress.
Please refer to the appendix 3 to get the code of the script.&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;Meanwhile the below show the results served pages per/second with three
sets from the automatically created file from the custom script, named
&lt;em&gt;results_lab2.txt&lt;/em&gt;.&lt;/p&gt;
&lt;/p&gt;

&lt;table&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;thead&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;tr&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;th&gt;
&lt;/th&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;th align="center"&gt;
Set1

&lt;/th&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;th align="center"&gt;
Set2

&lt;/th&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;th align="center"&gt;
Set3

&lt;/th&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;th align="right"&gt;
Avg

&lt;/th&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;/tr&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;/thead&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;tbody&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;tr&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;td&gt;
wordpress default

&lt;/td&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;td align="center"&gt;
3.15

&lt;/td&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;td align="center"&gt;
3.7

&lt;/td&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;td align="center"&gt;
3.84

&lt;/td&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;td align="right"&gt;
3.56

&lt;/td&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;/tr&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;tr&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;td&gt;
WP WP-super-cache + eaccelerator

&lt;/td&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;td align="center"&gt;
26.48

&lt;/td&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;td align="center"&gt;
44.34

&lt;/td&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;td align="center"&gt;
45.68

&lt;/td&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;td align="right"&gt;
38.83

&lt;/td&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;/tr&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;tr&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;td&gt;
WP WP-super-cache + eaccelerator

&lt;/td&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;td align="center"&gt;
148.46

&lt;/td&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;td align="center"&gt;
173.03

&lt;/td&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;td align="center"&gt;
132.57

&lt;/td&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;td align="right"&gt;
151.35

&lt;/td&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;/tr&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;tr&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;td&gt;
.htaccess default permalink + wp-super-cache + eaccelerator

&lt;/td&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;td align="center"&gt;
158.57

&lt;/td&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;td align="center"&gt;
1734.11

&lt;/td&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;td align="center"&gt;
117.03

&lt;/td&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;td align="right"&gt;
136.57

&lt;/td&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;/tr&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;/tbody&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;/table&gt;

&lt;/p&gt;

&lt;h1&gt;CONCLUSION&lt;/h1&gt;
&lt;/p&gt;

&lt;p&gt;From the analysis above we can see that performance has increased and
wordpress project is more affectively respondent to our needs.&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;Illustrations shows that wordpress as a default setting, clean installed
and configure response with 3.15, 3.70 and 3.84 pages/per-second, which
is not good enough to satisfaction. Similar to, after installation and
configuration of wordpress plugin WP-Super-Cache we that notice that the
performance slightly has grown but still the performance doesn’t
satisfied higher. However after implying the second method, installing
eaccelerator the results drastically increased. From the above
illustration we can see that the different methods produce different set
results. Thus increasing changes performing different methods vs sets of
pages/per-second are specified in the illustration 1.&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;Finally the results were expected and demonstrating example how we can
increase the addictiveness of wordpress performance and increase the
respondent time pages view per/second.&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;However, if we need to get higher effectiveness and response time for
wordpress than should consider apply nginx[3] server and third party
projects, applications to increase the optimization of wordpress. For
instance good tutorial is on following blog [Howto hginx+php].&lt;/p&gt;
&lt;/p&gt;

&lt;h1&gt;APPENDIXES&lt;/h1&gt;
&lt;/p&gt;

&lt;p&gt;Appendix 1 is for installation process of Ubuntu Server 10.04 LTS and
wordpress, mysql installation, other appendix 2 is for virtual machines
configuration. The last appendix 4 is the custom script that will help
us to perform the analysis of the system.&lt;/p&gt;
&lt;/p&gt;

&lt;h2&gt;APPENDIX 1&lt;/h2&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Installation media: Ubuntu 10.04 LTS 32bit iso image;&lt;/li&gt;
&lt;li&gt;HW: Virtualbox, 1CPU 32bit, 512MB RAM, 8GB HD (dynamic allocation);&lt;/li&gt;
&lt;li&gt;NIC1 NAT;&lt;/li&gt;
&lt;li&gt;NIC2 host only (for ssh and http access from host);&lt;/li&gt;
&lt;li&gt;Language used in installation process: English and country Estonia;&lt;/li&gt;
&lt;li&gt;Keyboard Layout English;&lt;/li&gt;
&lt;li&gt;Hostname: pece&lt;/li&gt;
&lt;li&gt;Partition methods: Guided, use entire disk&lt;/li&gt;
&lt;li&gt;Username: pece&lt;/li&gt;
&lt;li&gt;no http proxy&lt;/li&gt;
&lt;li&gt;Default applications&lt;/li&gt;
&lt;li&gt;sudo apt-get install lamp phpmyadmin&lt;/li&gt;
&lt;li&gt;wget -c http://wordpress.org/latest.tar.gz&lt;/li&gt;
&lt;li&gt;tar xvjf latest.tar.gz&lt;/li&gt;
&lt;li&gt;sudo cp wordpress /var/www/wordpress&lt;/li&gt;
&lt;li&gt;sudo nano /var/www/wordpress/wp-config.php&lt;/li&gt;
&lt;li&gt;Change the settings to your needs&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;h2&gt;APPENDIX 2&lt;/h2&gt;
&lt;/p&gt;

&lt;p&gt;Ubuntu Server 10.04 LTS 32bit – Server&lt;/p&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Base Memory: 512 MB&lt;/li&gt;
&lt;li&gt;Acceleration: VT-x/AMD-V, Nested Paging&lt;/li&gt;
&lt;li&gt;Display – Video memory: 12 MB&lt;/li&gt;
&lt;li&gt;Storage: SATA Controller, Port 0: 8 GB&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Network:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adapter 1: Intel PRO/1000 MT Desktop (NAT)&lt;/li&gt;
&lt;li&gt;Adapter 2: Inter PRO/1000 MT Desktop (Host-only adapter,
    „VirtualBox Host-Only Enternet Adapter“)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;Security Fedora 14 32 bit – Client&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;base Memory: 512 MB&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Acceleration: VT-x/AMD-V, Nested Paging&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Display – Video memory: 12 MB&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Storage: SATA Controller, Port 0: 8 GB&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Network:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adapter 1: Adapter 1: Parvirtualized Network (NAT)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adapter 2: Adapter 2: Inter PRO/1000 MT Desktop (Host-only
adapter,„VirtualBox Host- Only Enternet Adapter“)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;
&lt;/p&gt;&lt;/p&gt;
&lt;h2&gt;APPENDIX 3&lt;/h2&gt;
&lt;/p&gt;

&lt;p&gt;File called lab2_test.sh. Content of the file:&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;+--------------------------------------+--------------------------------------+
| &lt;div class="linenodiv"&gt;              | &lt;div class="highlight"&gt;              |
|                                      |                                      |
|      1 2 3 4 5 6 7 8 910111213141516 |     #!/bin/bash#Author Margus Ernits |
| 1718192021222324                     | #License GPLCONCURENCY=10RESULTS_FIL |
|                                      | E=results.txtif [ $# -ne 1 ]; thenec |
| &lt;/div&gt;                               | ho "Use $0 http://yourwordpressIP/yo |
|                                      | urwordpresssite/"echo "for example:" |
|                                      | echo "$0 http://192.168.56.102/wordp |
|                                      | ress/"exit 1fiecho "give name for th |
|                                      | is test"echo "for example: wordpress |
|                                      |  with supercache"read TEST_NAMEtest  |
|                                      | -e ${RESULTS_FILE} || echo "Test Nam |
|                                      | e,Set 1,Set 2,Set 3"&amp;gt;${RESULTS_FI |
|                                      | LE}RESULTS=$TEST_NAMEfor setno in $( |
|                                      | seq 1 3); doecho "Set $setno ..."SET |
|                                      | _RESULT=$(ab -c$CONCURENCY -n200 $1| |
|                                      | grep "Requests per second:"|cut -f2- |
|                                      | d:|cut -f1 -d'[')RESULTS=${RESULTS}, |
|                                      | $SET_RESULTdoneecho "$RESULTS"&amp;gt;&amp;amp;g |
|                                      | t;${RESULTS_FILE}echo "test: $TEST_N |
|                                      | AME done"                            |
|                                      |                                      |
|                                      | &lt;/div&gt;                               |
|                                      |                                      |
|                                      | &lt;/p&gt;                                 |
|                                      | &lt;p&gt;                                  |
+--------------------------------------+--------------------------------------+&lt;/p&gt;
&lt;/p&gt;

&lt;h1&gt;Bibliography&lt;/h1&gt;
&lt;/p&gt;

&lt;p&gt;WP-Super-Cache Installation: WP, Installation, 2011,
&lt;a href="http://wordpress.org/extend/plugins/wp-super-%20cache/installation/" title="http://wordpress.org/extend/plugins/wp-super- cache/installation/"&gt;http://wordpress.org/extend/plugins/wp-super-cache/installation/&lt;/a&gt;&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;EAccelerator Installing from source: eAccelerator project, Installation
from source code, 2011, &lt;a href="http://eaccelerator.net/wiki/InstallFromSource"&gt;http://eaccelerator.net/wiki/InstallFromSource&lt;/a&gt;&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;Using Permalinks: WordPress, Using Permalinks, 2011,
&lt;a href="http://codex.wordpress.org/Using_Permalinks"&gt;http://codex.wordpress.org/Using_Permalinks&lt;/a&gt;&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;Howto hginx+php: joneslee85, Howto nginx + php5 + mysql + phpmyadmin +
ubuntu shortest setup, 2010,
&lt;a href="http://joneslee85.wordpress.com/2010/02/28/howto-nginx-php5-mysql-phpmyadmin-%20ubuntu-shortest-setup/" title="http://joneslee85.wordpress.com/2010/02/28/howto-nginx-php5-mysql-phpmyadmin-ubuntu-shortest-setup/"&gt;http://joneslee85.wordpress.com/2010/02/28/howto-nginx-php5-mysql-phpmyadmin-ubuntu-shortest-setup/&lt;/a&gt;&lt;/p&gt;
&lt;/p&gt;

&lt;h1&gt;Footnotes&lt;/h1&gt;
&lt;/p&gt;

&lt;p&gt;[1] WP Super Cache –
&lt;a href="http://wordpress.org/extend/plugins/wp-super-cache/&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;p&amp;gt;[2]%20eAccelerator%20-%20&amp;lt;a%20href="&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;[2] eAccelerator - &lt;a href="http://eaccelerator.net/"&gt;http://eaccelerator.net/&lt;/a&gt;&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;[3] Nginx Inc – http://nginx.net/&lt;/p&gt;
&lt;/p&gt;</content><category term="acceleration"></category><category term="optamization"></category><category term="simmulation of attacks and defence"></category><category term="wordpress"></category></entry></feed>